[{"id":0,"href":"/docs/custom-firmware/cc3200/hackieboxng-bl/","title":"HackieboxNG Bootloader","section":"CC3200","content":" HackieboxNG Custom Bootloader # Introduction # HackieboxNG is the next generation bootloader for your cc3200 based toniebox!\nHackieboxNG SD bootloader # The HackieboxNG SD bootloader consists of two stages. The first stage is a sd bootloader which is called preload. This preloader then runs the stage two bootloader from microSD. This is the bootloader itself that allows selecting + running different firmwares.\nFeatures # Nine firmware slots Loading any CC3200 standard firmware Loading the original firmware directly Simulate the OFW bootloaders behaviour Patching binaries in memory for ex. domain name changes for teddyCloud, enable SLIX tags or disable charger wakeup (more) Highly configurable via json files Installation # Please take a look into the wiki\n"},{"id":1,"href":"/docs/how-to-get-started/","title":"How to get started?","section":"Docs","content":" How to get started? # Let\u0026rsquo;s start from zero. You have just bought a brand new Toniebox or you just found your way to this website.\nThere are two paths you might choose from to get more out of your Toniebox.\nThe easy way (techless) # You may already know creative tonies. This is the Tonies way to get your own content onto the box. We offer your an alternative way to replace all content on your Toniebox without the 90 minute or creative tonie only limit. You\u0026rsquo;ll need to remove the microSD from your Box and put it into your computer. With our software TeddyBench you can edit the content on it. If you like you may also buy cheap SLIX-L Tags, assign your very own content to it with TeddyBench and design your own figurines or even create them together with your children.\nThe complex way (tech-savy) # If Docker, DNS, MQTT and Flash are no new words for you, you may go a step further. With the open-source server teddyCloud you can run your own toniebox cloud. This allows you to serve your own content to the box over the air and you can also download the original content from the original cloud. For that you\u0026rsquo;ll need to download and replace the certificates on the toniebox\u0026rsquo; flash memory.\n"},{"id":2,"href":"/docs/custom-firmware/cc3200/hackieboxng-bl/install/","title":"Installation","section":"HackieboxNG Bootloader","content":" HackieboxNG Installation # Backup # Please make a full file based + flash backup of your toniebox\u0026rsquo;s flash with cc3200tool. More details on the usage of the cc3200tool and the required hardware can be found here Python 3 is needed! You may use a different COM port or the right device on linux ex. /dev/ttyUSB0.\npython cc.py -p COM3 read_all_files targetdir/ read_flash backup.bin Please check, if you dumped every important file. If not, please check the known problems wiki entry of the cc3200tool for a workaround..\nHackieboxNG Bootloader # Get the bootloader # Download the latest version from here. Please unzip the release to your desired directory. You will find a directory called flash there for the file(s) that need to be copied to the flash and a directory called sd for the sd files. If you don\u0026rsquo;t mind a slightly slower boot but want some log output via UART (Baud 921600, TX Pin) use the debug variant (check the ngCfg.json to enable it!).\nPreface # If you have previously installed the CFW SD Bootloader please use 1b) otherwise for first time installation please use 1a).\n1a) Preloader (Stage 1) - For first time installation # Move original bootloader # First of all you need to copy your just backuped original mcuimg.bin (original bootloader) from your toniebox to a different location (flash:/sys/pre-img.bin) to boot it with the HackieboxNG Bootloader later on. Please don\u0026rsquo;t confuse the mcuimg.bin (ofw bootloader) you are going to dump with the mcuimg.bin within the hackiebox zip package. (/flash/sys/mcuimg.bin)\npython cc.py -p COM3 read_file /sys/mcuimg.bin mcuimg.bin python cc.py -p COM3 write_file mcuimg.bin /sys/pre-img.bin Install preloader # python cc.py -p COM3 write_file flash/sys/mcuimg.bin /sys/mcuimg.bin Or as oneliner # python cc.py -p COM3 read_file /sys/mcuimg.bin mcuimg.bin write_file mcuimg.bin /sys/pre-img.bin write_file flash/sys/mcuimg.bin /sys/mcuimg.bin Dumping the original firmware # The box saves up to 3 different versions of the OFW. It can be found flash:/sys/mcuimgN.bin (replace N with 1, 2 or 3). A command to dump all three versions would be:\npython cc.py -p COM3 read_file /sys/mcuimg1.bin mcuimg1.bin read_file /sys/mcuimg2.bin mcuimg2.bin read_file /sys/mcuimg3.bin mcuimg3.bin To check which version the dumped firmwares are you may just open it with a hex editor (quite at the end) or use our python tool to extract it. If you found a new firmware, let us know by opening a push request for our known firmware listing in the wiki.\n1b) Preloader (Stage 1) - For updating the sd bootloader # You may use the (old) Hackiebox CFW to upload the preloader. This way you can install it over the air without direct access to the flash if you have already installed a previous version of the cfw bootloader/preloader. Just run the Hackiebox CFW and use the webinterface to upload the new /sys/mcuimg.bin.\nBackup # To verify that you have currently installed the ofw bootloader to /sys/pre-img.bin you may download the file from flash\nhttp://*.*.*.*/api/ajax?cmd=get-flash-file\u0026amp;filepath=/sys/pre-img.bin Copy over preloader # Select Target \u0026ldquo;Flash\u0026rdquo; Select Local file \u0026ldquo;flash/sys/mcuimg.bin\u0026rdquo; Set Overwrite to \u0026ldquo;on\u0026rdquo; Set SD/Flash path to \u0026ldquo;/sys/mcuimg.bin\u0026rdquo; Press Upload! Verification # To verify that the upload was successful you can download the mcuimg.bin from flash afterwards and compare it with the flash/sys/mcuimg.bin you have just uploaded.\nhttp://*.*.*.*/api/ajax?cmd=get-flash-file\u0026amp;filepath=/sys/mcuimg.bin 2) Bootloader (Stage 2) # SD files # Copy over all the contents of the sd folder the sd card of the toniebox. Copy over the original bootloader (mcuimg.bin from your backup) to the first ofw slot sd:/revvox/boot/ng-ofw1.bin. Now the HackieboxNG bootloader will instantly boot the original bootloader and run the original firmware.\nNote: The preloader will load any file placed to sd:/revvox/boot/ngbootloader.bin.\nMore about the different firmware slots and the configuration here.\n"},{"id":3,"href":"/docs/custom-firmware/cc3200/hackieboxng-bl/bootloader/","title":"Bootloader","section":"HackieboxNG Bootloader","content":" HackieboxNG SD bootloader # The HackieboxNG SD bootloader consists of two bootloaders (called stages). Both stages share the same codebase and are relocated to 0x20038000 before run.\nPreloader (Stage 1) # The preloader runs a fixed file from the sd card (sd:/revvox/boot/ngbootloader.bin) without any checks. An update for shouldn\u0026rsquo;t be necesarry in the future. It should be installed as primary bootloader for HackieboxNG to flash:/sys/mcuimg.bin.\nAll error codes for the preloader are in blue.\nBootloader (Stage 2) # When no ear is pressed, the bootloader loads the selected standard bootslot. If you hold the big ear while booting you may select a different slot by pressing the small ear for a short moment. Only slots with a file on the sd card can be selected. You may use them in a different way and change the settings within the configuration. The selected slot is indicated by 1-3 blinks in a color assigned to each group. Following slots are available:\nFilepath: sd:/revvox/boot/ng-XXXY.bin\nGreen group - Original firmware # ofw1 - OFW bootloader from flash:/sys/pre-img.bin recommended here ofw2 - simulate OFW behaviour and load the same image like the OFW would, but with patches ofw3 - specific OFW file with patches (optional) Blue group - Custom firmware # cfw1 - Primary firmware (optional) cfw2 - Backup firmware (optional) cfw3 - (optional) Cyan group - Additonal firmwares # add1 - (optional) add2 - (optional) add3 - (optional) All error codes for the bootloader are in green.\nConfiguration # The configuration for the bootloader is saved within sd:/revvox/boot/ngCfg.json. All sections or keys starting with and underscore \u0026ldquo;_\u0026rdquo; a comments and will be ignored.\nGeneral Section # Key Description Values Default activeImg Sets the firmware slot to select at startup ofw1, ofw2, ofw3, cfw1, cfw2, cfw3, add1, add2, add3 ofw1 waitForPress Waits for an earpress on startup with a blink sequence (blue, green, cyan, black) true, false false waitForBoot Waits for an earpress on before firmware boot with a blink sequence (blue, green, cyan, black) true, false false waitTimeoutInS Timeout in seconds for waitForPress if no earpress (hibernation) 1-255 60 minBatteryLevel Poweroff voltage to protect the battery. Divide through 2785 to get voltage (Standard 3.18V) 8869 ofwFixValue Magic bytes to be placed into the OFW Image during boot (can be extracted from OFW BL data[-8:-4]) hex array with 4 bytes [\u0026ldquo;4C\u0026rdquo;, \u0026ldquo;01\u0026rdquo;, \u0026ldquo;10\u0026rdquo;, \u0026ldquo;00\u0026rdquo;] ofwFixFlash Magic bytes read from the ofw bootloader on flash ex. /sys/pre-img.bin serialLog Enable log to UART (TX) @921600 baud. Only works for debug build! true, false true logLevel Set Log level 0:Trace - 5:Fatal 0-5 DEBUG_LOG_LEVEL logColor Enable colored log true, false false Firmware Section # There are nine firmware slots, named ofw1, ofw2, ofw3, cfw1, cfw2, cfw3, add1, add2 and add3.\nKey Description Values Default checkHash Check hash of firmware true, false true hashFile Chech hash from ng-XXX?.sha file (true) or from the last 64 byte of the firmware itself (ofw) true, false false watchdog Keep watchdog enabled when booting firmware (if booting fails, box will restart) true, false false ofwFix Add magic bytes to the firmware image to make ofw directly boot true, false false ofwSimBL Read image to boot from flash:/sys/mcubootinfo.bin and load the image from flash:/sys/mcuimgN.bin instead of reading from sd (like the ofw bootloader) true, false false bootFlashImg Read firmware from file on flash true, false false flashImg Path to the file on flash ex. /sys/pre-img.bin patches List of patches to load, see patch directory or patch wiki [\u0026ldquo;noCerts.305\u0026rdquo;, \u0026ldquo;noPass3.305\u0026rdquo;] [] SHA256 check # For each slot an SHA256 check is available. Either as a seperated ng-XXXY.sha file or directly appended to the binary\nFor example all OFW binaries have a SHA256 appended to their file ending (except the ofw bootloader). A fitting ng-ofw1.sha is provided for the ofw bootloader. The older Hackiebox CFW doesn\u0026rsquo;t have a SHA256 appened. So you may need to create ng-cfwX.sha yourself if you want to use it. For HackieboxNG the SHA256 hash will be directly appended to the firmware file itself.\nWindows # Command: Get-Filehash FILENAME.BIN -Algorithm SHA256\nLinux # Command: shasum256 FILENAME.BIN\nPatches # The integrated patch engine allows to apply patches to the loaded firmware in-memory. Currently just a simple dup2 patcher style Search \u0026amp; Replace engine ist implemented. You may patch up to 256 bytes per patch and apply up to 32 patches per slot. The patchname is limited to 32 characters. More about available ofw patches\nError codes # If the bootloader detects a problem, it blinks in a defined pattern. The preloader on the flash blinks blue, the bootloader on the sd blinks green.\nSD related codes # If a sd related problem occurs, the box combines two patterns. The first one indicates where the problem roughly occured. The second one gives you more information about it.\nFirst pattern # SD not found - 2x500ms, wait 500ms # Please check if the sd is placed in the holder correctly and the sd is okay. The OFW will blink in red and shut off.\nFile could not be opened - 3x500ms, wait 2000ms # Problem opening the firmware file\nFile could not be read - 4x500ms, wait 2000ms # Problem reading the firmware file\nSecond pattern (X times 1000ms) # FR_DISK_ERR, /* (1) A hard error occurred in the low level disk I/O layer */ FR_INT_ERR, /* (2) Assertion failed */ FR_NOT_READY, /* (3) The physical drive cannot work */ FR_NO_FILE, /* (4) Could not find the file */ FR_NO_PATH, /* (5) Could not find the path */ FR_INVALID_NAME, /* (6) The path name format is invalid */ FR_DENIED, /* (7) Access denied due to prohibited access or directory full */ FR_EXIST, /* (8) Access denied due to prohibited access */ FR_INVALID_OBJECT, /* (9) The file/directory object is invalid */ FR_WRITE_PROTECTED, /* (10) The physical drive is write protected */ FR_INVALID_DRIVE, /* (11) The logical drive number is invalid */ FR_NOT_ENABLED, /* (12) The volume has no work area */ FR_NO_FILESYSTEM, /* (13) There is no valid FAT volume */ FR_MKFS_ABORTED, /* (14) The f_mkfs() aborted due to any problem */ FR_TIMEOUT, /* (15) Could not get a grant to access the volume within defined period */ FR_LOCKED, /* (16) The operation is rejected according to the file sharing policy */ FR_NOT_ENOUGH_CORE, /* (17) LFN working buffer could not be allocated */ FR_TOO_MANY_OPEN_FILES, /* (18) Number of open files \u0026gt; _FS_LOCK */ FR_INVALID_PARAMETER /* (19) Given parameter is invalid */ Other # Battery Low - 2x66ms, 2x133ms, 2x66ms # Battery is low. Value is under the minimum defined in minBatteryLevel. Box hibernates\nHash differs - 10x50ms # The actual hash of the firmware is different from the one defined in the firmware itself or in the hashfile (depens on the config). Checking the UART-output may help.\nWatchdog reset - 5x33ms, 5x66ms, 5x33ms # The watchdog reseted the box, because the box was in an unintended state or the firmware is broken.\nApplication error - 3x33ms, 3x66ms, 3x33ms # Application error. This shouldn\u0026rsquo;t happen.\n"},{"id":4,"href":"/docs/tools/","title":"Tools","section":"Docs","content":"Test\n"},{"id":5,"href":"/docs/custom-firmware/cc3200/hackieboxng-bl/ofw-patches/","title":"Firmware patches","section":"HackieboxNG Bootloader","content":" HackieboxNG original firmware patches # Preface # Every patch is written for one or more specific versions of the original firmware. Currently the latest version supported for all patches is EU_V3.1.0_BF2-0. An overview over all known firmware versions can be found in the toniebox wiki.\nOffline / Privacy # It is recommended to keep the toniebox offline if you are using a patched firmware. Using the offline mode is recommended. In addition you should enable the Null certificate patch.\nNull certificate Paths (noCerts.305.json) # This patch clears the paths to the certificates. This way the box will abort the https connection to boxine as it can\u0026rsquo;t check if the boxine server is a valid one.\nAlternative Tags (SLIX / SLIX2) # If you want to use alternative tags those patches will help you. Even other iso15693 tags may work.\nBlock count \u0026gt;8 (blockCheck.310.json / blockCheck.307.json) # Usally the toniebox checks if the tag has exactly 8 blocks. The check allows the tag to have more than that. (ex. SLIX or SLIX2)\nBlock count \u0026lt;=8 (blockCheckRemove.310.json / blockCheckRemove.308.json) # Usally the toniebox checks if the tag has exactly 8 blocks. The check allows the tag to have less than that.\nNo privacy password (noPass3.310.json / noPass3.305.json) # Usally doesn\u0026rsquo;t allow tags without the boxine specific or the NXP specific privacy mode password. With the patch you can use tags without having privacy password support (ex. SLIX). It disables the rf field for a moment when the second privacy password failed. This patch uses the new dynamic patching engine to generate dynamic arm asm bytecode.\nSecond privacy password to 00000000 (secondPwZero.305.json) # Usally doesn\u0026rsquo;t the toniebox checks for two passwords. The boxine specific and the NXP specific standard password 0f0f0f0f. This patch changes the second password to 00000000.\nNo UID check (uidCheck.307.json) # Usally the toniebox checks if the UID of the tag starts with E0:04:03. With that patch you may use tags with other UIDs (ex SLIX or SLIX2)\nHide A: Do not hide files that need new content (noHide.308.json) # You just need one of the hide patches! This one is recommended Usally the toniebox sets the file attribute hidden of the tonie file for all live tags or tags having new content. If the toniebox is online and the tag is placed on top it will delete that file to redownload its content. This also applies to all custom tags. This patch disabled the hide function. So the files won\u0026rsquo;t be deleted and redownloaded. Attention You won\u0026rsquo;t be able to update creative tonies anymore!\nHide B: Unhide files that should be hidden (because they have new content) (alwaysUnhide.308.json) # You just need one of the hide patches! Usally the toniebox sets the file attribute hidden of the tonie file for all live tags or tags having new content. If the toniebox is online and the tag is placed on top it will delete that file to redownload its content. This also applies to all custom tags. This patch replaces the hide functionality with unhide. So the files won\u0026rsquo;t be deleted and redownloaded. Attention You won\u0026rsquo;t be able to update creative tonies anymore!\nAdditional # Disable privacy mode (noPrivacy.310.json / noPrivacy.305.json) # Usally the toniebox puts every tag into privacy mode after reading it. This patch disables that, so you can easily read the UID with any standard iso15693 reader like your phone.\nLoad CA from c2.der (altCa.305.json) # To use two CAs you can use this patch. It will change the CA path from flash:/certs/ca.der to flash:/certs/c2.der\nChange Boxine URLs (altUrl.305.json) # Changes the Boxine Cloud URLs from prod.de.tbs.toys to prod.revvox and rtnl.bxcl.de to rtnl.revvox.\nDevelopment # Enable SWD (swd.json) # Handy patch to debug the OFW and to verify and test patches. Attenion, the red led won\u0026rsquo;t work with that patch enabled!\nDeprecated Patches # No privacy password (noPass.305.json) # Deprecated doesn\u0026rsquo;t reset the RF field so some tags will fail Usally doesn\u0026rsquo;t allow tags without the boxine specific or the NXP specific privacy mode password. With the patch you can use tags without having privacy password support (ex. SLIX).\nNo privacy password (noPass2.308.json) # Deprecated replaced with noPass3 Usally doesn\u0026rsquo;t allow tags without the boxine specific or the NXP specific privacy mode password. With the patch you can use tags without having privacy password support (ex. SLIX). It disables the rf field for a moment when the second privacy password failed.\nDisable charger wakeup (noChargWake.305.json) # The toniebox won\u0026rsquo;t wakeup anymore if it is put onto the charger. noChargWake.305 Doesn\u0026rsquo;t work on 3.1.0-BF2 and higher. Box won\u0026rsquo;t wakeup anymore Attention, this patch is only working if you disconnect the battery for a second before loading the patched ofw. If you start the unpatched ofw once, you will have to disconnect the battery again\n"},{"id":6,"href":"/docs/box-variants/","title":"Box Variants","section":"Docs","content":"Test\n"},{"id":7,"href":"/docs/box-variants/cc3200/","title":"CC3200","section":"Box Variants","content":"Test\n"},{"id":8,"href":"/docs/custom-firmware/cc3200/","title":"CC3200","section":"Custom Firmware","content":"Test\n"},{"id":9,"href":"/docs/box-variants/cc3235/","title":"CC3235","section":"Box Variants","content":"Test\n"},{"id":10,"href":"/docs/custom-firmware/","title":"Custom Firmware","section":"Docs","content":"Test\n"},{"id":11,"href":"/docs/box-variants/esp32/","title":"ESP32","section":"Box Variants","content":"Test\n"},{"id":12,"href":"/docs/custom-firmware/cc3200/hackiebox-cfw/","title":"Hackiebox CFW PoC","section":"CC3200","content":"Test\n"},{"id":13,"href":"/docs/tools/teddybench/","title":"TeddyBench","section":"Tools","content":"Test\n"},{"id":14,"href":"/docs/tools/teddycloud/","title":"teddyCloud","section":"Tools","content":"Test\n"}]